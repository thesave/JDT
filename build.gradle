group 'jsdt'

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'

def libDir = file( "lib" )

configurations {
    core
    app.extendsFrom core
    testImplementation.extendsFrom app
}

dependencies {
    app "org.antlr:antlr4:4.9.2"
    app 'com.github.javaparser:javaparser-core:3.22.1'
    app 'info.picocli:picocli:4.6.1'
    core fileTree( dir: libDir, include: '*.jar' )
}

sourceSets {
    core {
        java.srcDir 'src/core/java'
        compileClasspath += configurations.core
    }
    app {
        java.srcDir 'src/app/java'
        runtimeClasspath += compileClasspath += configurations.core + configurations.app + sourceSets.core.output
    }
    test {
        runtimeClasspath += compileClasspath += configurations.core + configurations.app + sourceSets.core.output + sourceSets.app.output
    }
}

build {
    dependsOn compileCoreJava
    dependsOn compileAppJava
}

def jarOutputFolder = "dist"

version "0.2"

task setVersion {
    File file = projectDir.toPath().resolve("src/app/resources/project.properties" ).toFile();
    if( ! file.exists() ){
        file.createNewFile()
    }
    file.write "version=" + version
}
compileJava.dependsOn( setVersion )

task jarApplication( type: Jar ) {
    destinationDirectory = file( jarOutputFolder )
    manifest {
        attributes "Implementation-Title": "JSDT Application Implementation",
                "Implementation-Version": project.version,
                'Main-Class': 'jsdt.JSDT'
    }
    setDuplicatesStrategy( DuplicatesStrategy.WARN )
    from sourceSets.app.output
    from sourceSets.core.output
    from {
        configurations.app.collect { it.isDirectory() ? it : zipTree(it) }
    }
    archiveBaseName.set( "jsdt" )
}

task jarCore( type: Jar ) {
    manifest {
        attributes "Implementation-Title": "JSDT core library",
                "Implementation-Version": project.version
    }
    from sourceSets.core.output
    destinationDirectory = file( jarOutputFolder )
    setDuplicatesStrategy( DuplicatesStrategy.WARN )
    archiveBaseName.set( "jsdt-core" )
}

jar {
    enabled = false // this avoids creating an empty "project" jar file
    finalizedBy jarCore
    finalizedBy jarApplication
}

clean.doFirst{
    delete jarOutputFolder
}